{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["MovieCard","movie","Poster","Title","Plot","imdbID","className","src","alt","href","MoviesList","movies","map","FindMovie","addNewMovie","useState","setMovie","movieTitleQuery","setMovieTitleQuery","hasLoadingError","setHasLoadingError","loadingMovie","setLoadingMovie","handleLoadMovieFromServer","a","query","fetch","then","res","json","newMovie","alert","onSubmit","event","preventDefault","htmlFor","type","id","placeholder","value","onChange","target","disabled","classNames","onClick","App","setMovies","find","addedMovie","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7369ad32.chunk.js","sourcesContent":["import React from 'react';\nimport { MovieData } from '../../types/MovieData';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: MovieData,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => {\n  const {\n    Poster,\n    Title,\n    Plot,\n    imdbID,\n  } = movie;\n\n  return (\n    <div className=\"card\" data-cy=\"movieCard\">\n      <div className=\"card-image\">\n        <figure className=\"image is-4by3\">\n          <img\n            data-cy=\"moviePoster\"\n            src={Poster === 'N/A'\n              ? 'https://via.placeholder.com/360x270.png?text=no%20preview'\n              : Poster}\n            alt=\"Film logo\"\n          />\n        </figure>\n      </div>\n      <div className=\"card-content\">\n        <div className=\"media\">\n          <div className=\"media-left\">\n            <figure className=\"image is-48x48\">\n              <img\n                src=\"images/imdb-logo.jpeg\"\n                alt=\"imdb\"\n              />\n            </figure>\n          </div>\n          <div className=\"media-content\">\n            <p className=\"title is-8\" data-cy=\"movieTitle\">{Title}</p>\n          </div>\n        </div>\n\n        <div className=\"content\" data-cy=\"movieDescription\">\n          {Plot}\n          <br />\n          <a href={`https://www.imdb.com/title/${imdbID}/`} data-cy=\"movieURL\">\n            IMDB\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { MovieData } from '../../types/MovieData';\n\ntype Props = {\n  movies: MovieData[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbID}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import React, { useState } from 'react';\nimport './FindMovie.scss';\nimport classNames from 'classnames';\n\nimport { MovieData } from '../../types/MovieData';\nimport { getMovie } from '../../api';\nimport { MovieCard } from '../MovieCard/MovieCard';\n\ntype Props = {\n  addNewMovie: (newMovie: MovieData | null) => void,\n};\n\nexport const FindMovie: React.FC<Props> = ({ addNewMovie }) => {\n  const [movie, setMovie] = useState<MovieData | null>(null);\n  const [movieTitleQuery, setMovieTitleQuery] = useState('');\n  const [hasLoadingError, setHasLoadingError] = useState(false);\n  const [loadingMovie, setLoadingMovie] = useState(false);\n\n  const handleLoadMovieFromServer = async () => {\n    setLoadingMovie(true);\n\n    try {\n      const newMovie = await getMovie(movieTitleQuery);\n\n      if (!newMovie.imdbID) {\n        setMovie(null);\n        setHasLoadingError(true);\n      } else {\n        setMovie(newMovie);\n        setHasLoadingError(false);\n      }\n    } catch (error) {\n      alert('Error loading data from the server');\n    } finally {\n      setLoadingMovie(false);\n    }\n  };\n\n  const handleFindMovie = (query: string) => {\n    if (query !== movieTitleQuery) {\n      setHasLoadingError(false);\n    }\n\n    setMovieTitleQuery(query);\n  };\n\n  const handleAddNewMovieToTheList = () => {\n    addNewMovie(movie);\n    setMovie(null);\n    setMovieTitleQuery('');\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={event => event.preventDefault()}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              value={movieTitleQuery}\n              onChange={(event) => handleFindMovie(event.target.value)}\n            />\n          </div>\n\n          {hasLoadingError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n\n            <button\n              disabled={!movieTitleQuery}\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames(\n                'button is-light',\n                { 'is-loading': loadingMovie },\n              )}\n              onClick={handleLoadMovieFromServer}\n            >\n              {!movie\n                ? 'Find a movie'\n                : 'Search again'}\n            </button>\n\n          </div>\n\n          <div className=\"control\">\n            {movie && (\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={handleAddNewMovieToTheList}\n              >\n                Add to the list\n              </button>\n            )}\n          </div>\n        </div>\n      </form>\n\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { MovieData } from './types/MovieData';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=f39e7bf2';\n\nexport function getMovie(query: string): Promise<MovieData> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json());\n}\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { MovieData } from './types/MovieData';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<MovieData[]>([]);\n\n  const addNewMovie = (newMovie: MovieData | null) => {\n    if (newMovie === null) {\n      return;\n    }\n\n    const isMovieAlreadyExist = movies.find(\n      addedMovie => addedMovie.imdbID === newMovie.imdbID,\n    );\n\n    if (!isMovieAlreadyExist) {\n      setMovies([...movies, newMovie]);\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie addNewMovie={addNewMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}